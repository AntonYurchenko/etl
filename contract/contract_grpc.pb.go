// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: contract/contract.proto

package contract

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataConsumerClient is the client API for DataConsumer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataConsumerClient interface {
	// It reads messages with data from stream and writes statuses to stream as response.
	Exchange(ctx context.Context, opts ...grpc.CallOption) (DataConsumer_ExchangeClient, error)
}

type dataConsumerClient struct {
	cc grpc.ClientConnInterface
}

func NewDataConsumerClient(cc grpc.ClientConnInterface) DataConsumerClient {
	return &dataConsumerClient{cc}
}

func (c *dataConsumerClient) Exchange(ctx context.Context, opts ...grpc.CallOption) (DataConsumer_ExchangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataConsumer_ServiceDesc.Streams[0], "/DataConsumer/Exchange", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataConsumerExchangeClient{stream}
	return x, nil
}

type DataConsumer_ExchangeClient interface {
	Send(*Message) error
	Recv() (*Status, error)
	grpc.ClientStream
}

type dataConsumerExchangeClient struct {
	grpc.ClientStream
}

func (x *dataConsumerExchangeClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataConsumerExchangeClient) Recv() (*Status, error) {
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataConsumerServer is the server API for DataConsumer service.
// All implementations must embed UnimplementedDataConsumerServer
// for forward compatibility
type DataConsumerServer interface {
	// It reads messages with data from stream and writes statuses to stream as response.
	Exchange(DataConsumer_ExchangeServer) error
	mustEmbedUnimplementedDataConsumerServer()
}

// UnimplementedDataConsumerServer must be embedded to have forward compatible implementations.
type UnimplementedDataConsumerServer struct {
}

func (UnimplementedDataConsumerServer) Exchange(DataConsumer_ExchangeServer) error {
	return status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}
func (UnimplementedDataConsumerServer) mustEmbedUnimplementedDataConsumerServer() {}

// UnsafeDataConsumerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataConsumerServer will
// result in compilation errors.
type UnsafeDataConsumerServer interface {
	mustEmbedUnimplementedDataConsumerServer()
}

func RegisterDataConsumerServer(s grpc.ServiceRegistrar, srv DataConsumerServer) {
	s.RegisterService(&DataConsumer_ServiceDesc, srv)
}

func _DataConsumer_Exchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataConsumerServer).Exchange(&dataConsumerExchangeServer{stream})
}

type DataConsumer_ExchangeServer interface {
	Send(*Status) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type dataConsumerExchangeServer struct {
	grpc.ServerStream
}

func (x *dataConsumerExchangeServer) Send(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataConsumerExchangeServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataConsumer_ServiceDesc is the grpc.ServiceDesc for DataConsumer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataConsumer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DataConsumer",
	HandlerType: (*DataConsumerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Exchange",
			Handler:       _DataConsumer_Exchange_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "contract/contract.proto",
}
